

;;;; Primes
(function primes n
  (let find-range (range 2 (inc n))
       check-nums (range 2 (-> n ceil sqrt inc))
       skip-each-after #(skip-each % (skip %1 %2))
       muls (xmap #(drop 0 (skip-each-after (dec %1) % find-range)) check-nums))
  (remove (flatten muls) find-range))
(function distinct-factor prime-precalc n
  (filter @(div? n) prime-precalc))
(function factor prime-precalc n
  (map (fn t (find (div? n) (map @(** t) (range (round (sqrt n)) 0)))) (distinct-factor prime-precalc n)))
(function decomposed-factors prime-precalc n
  (map (fn dist t (repeat dist (/ (logn t) (logn dist)))) (distinct-factor prime-precalc n) (factor prime-precalc n)))



;;; Additive primes
(var additive-prime? #(-> %1 str (split "") @(.. +) %))
;;;

;;; Attractive numbers
(var attract-num? #(-> %1 @(decomposed-factors %) flatten len %))
(filter attract-num? (range 121))
;;;

;;; Almost prime
(var k-almost-prime (fn kseq until (let primes-n (primes n)) (map (comp @(decomposed-factors primes-n) flatten len (= kseq)) (range 2 until))))
;;;

;;;;

;;; 99 bottles of beer
(var nbottles
#(str % (if (= 1 %) " bottle " " bottles ") "of beer on the wall\n" %  (if (= 1 %) " bottle " " bottles ") " of beer\nTake one down, pass it around\n" (dec %)  (if (= 1 (dec %)) " bottle " " bottles ") " of beer on the wall\n"))
(-> 100 @(range 1) reverse (map nbottles) (join "\n"))
;;;
(function hv x (["a" "e" "i" "o" "u"] (to-vec x)))
;;; 100 doors (Budget error)
(function toggle-doors each doors
  (xmap #((if (div? (inc %) each) ! val) %1) doors))
(reductions
  (fn [each doors] [(inc each) (toggle-doors each doors)])
  [1 (repeat false 100)]
  (range 100))
;;;

;;; Statistics
;; Means
(var arithmetic-mean #(/ (.. + args) (len args))
     geometric-mean #(** (.. * args) (/ 1 (len args)))
     harmonic-mean #(/ (len args) (.. + (map (/ 1) args)))
     quadratic-mean #(sqrt (/ (.. + (map #(** % 2) args)) (len args))))
;; Median
(function median
  (let to-indcs (if (even? (len args)) (juxt floor ceil) vec))
  ((.. juxt (-> args len inc #(/ % 2) to-indcs (map dec))) (sort args)))
;; Mode
(function mode 
  (let freq (freqs args)
       maxfreq (.. max (vals args)))
  (keys (filter (fn [_ v] (= maxfreq v)) freq)))
;; Standard deviation
(function stddev
  (let arit-mean (.. arithmetic-mean args))
  (sqrt (* (/ 1 (len args)) (.. + (map #(** (- % arit-mean) 2) args)))))
;;;
;;; Anagram
(var anagrams? #(.. = (map sort args)))
;; Deranged anagrams
(var derrangements? #(and (.. anagrams? args) (.. and (.. map != args))))
;;
;;;
;;; Amb
(function amb
  (let [op res aargs] ((juxt 0 1 (skip 2)) args))
  (sieve (.. for #(when (= res (.. op args)) args) aargs)))
;;;
;;; ABC
(var find-idx #(when (let found (find % %1)) (idx %1 found)))
(function in-block? c (when (let block-idx (find-idx (substr? (upper-case c)) rem-blocks)) (var! rem-blocks drop block-idx)))
(function can-make-word word
  (var rem-blocks ["BO" "XK" "DQ" "CP" "NA" "GT" "RE" "TG" "QD" "FS" "JW" "HU" "VI" "AN" "OB" "ER" "FS" "LY" "PC" "ZM"])
  (.. and (map in-block? word)))
;;;
;;; AKS test for primes
(function fact n (if (= n 1) 1 (* n (fact (dec n)))))
(function choose n k (when (or (= n k) (zero? k)) (return 1)) (/ (fact n) (* (fact k) (fact (- n k) ) ) ))
(function bincoefs n (map @(choose n) (range (inc n)) ) )
(function AKS-prime? n (.. and (map #(div? % n) (-> (bincoefs n) (trunc 1) (skip 1)))))
;;;
;;; Proper divisors
(var proper-divisors #(filter (div? %) (-> (/ % 2) ceil inc @(range 1))))
;;;
;;; Amicable pairs
(var amicable? #(and (= (.. + (proper-divisors %1)) %) (= (.. + (proper-divisors %)) %1)))
;;;